/*
 * This file is part of pnc-repressurized API.
 *
 *     pnc-repressurized API is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     pnc-repressurized is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with pnc-repressurized API.  If not, see <https://www.gnu.org/licenses/>.
 */

package me.desht.pneumaticcraft.api.fuel;

import net.minecraft.world.level.material.Fluid;
import net.minecraft.tags.Tag;
import net.minecraft.world.level.Level;

import java.util.Collection;

public interface IFuelRegistry {
    /**
     * Adds a burnable fluid to the Liquid Compressor's available burnable fuels.  This also allows a bucket
     * of that fluid to be used in furnaces, the burn time being half the mLPerBucket value.
     *
     * @param fluidTag the fluid tag to register
     * @param mLPerBucket the amount of mL of air generated by burning 1000mB of the fuel in a Liquid Compressor. For
     *                   comparison, one piece of coal generates 16000mL in an Air Compressor.
     * @param burnRateMultiplier fuel burn rate multiplier; larger numbers mean the fuel burns faster and produces air
     *                          more quickly.  The total amount of air produced does not change.
     *
     * @deprecated fuel values should be loaded from datapack recipes
     */
    @Deprecated
    void registerFuel(Tag<Fluid> fluidTag, int mLPerBucket, float burnRateMultiplier);

    /**
     * As {@link #registerFuel(ITag, int, float)}, with a default burn rate of 1.
     *
     * @param fluidTag the fluid tag to register
     * @param mLPerBucket the amount of mL of air generated by burning 1000mB of the fuel. For comparison, one piece
     *                    of coal generates 16000mL in an Air Compressor.
     *
     * @deprecated fuel values should be loaded from datapack recipes
     */
    @Deprecated
    default void registerFuel(Tag<Fluid> fluidTag, int mLPerBucket) {
        registerFuel(fluidTag, mLPerBucket, 1f);
    }

    /**
     * Get the fuel value of the given fluid; this is defined as the amount of compressed air generated in a Liquid
     * Compressor (without Speed Upgrades) by burning 1000mL of the fluid.
     * @param fluid the fluid
     * @return the fuel value (0 for fluids which have not been registered as fuels)
     */
    int getFuelValue(Level world, Fluid fluid);

    @Deprecated
    default int getFuelValue(Fluid fluid) { return getFuelValue(null, fluid); }

    /**
     * Get the burn rate of the given fluid. Higher burn rates will generate compressed air faster in a Liquid
     * Compressor (and be used up faster), without affecting the total amount of air produced.
     * @param fluid the fluid
     * @return the burn rate (1.0f is the standard, default, rate)
     */
    float getBurnRateMultiplier(Level world, Fluid fluid);

    @Deprecated
    default float getBurnRateMultiplier(Fluid fluid) { return getBurnRateMultiplier(null, fluid); }

    /**
     * Get all the known fuels which have been registered with the fuel registry. In the case of conflicts, precedence
     * is as follows: 1) fluids from datapacks, 2) fluid tags from datapacks, 3) fluids from API registration
     * (including built-in), 4) fluid tags from API registration
     * <p>Note: this is a relatively expensive operation and should be used with care.  Use {@link #getFuelValue(Fluid)}
     * if you just need the value of a known fluid.
     *
     * @param world the world
     * @return a collection of fuel fluids
     */
    Collection<Fluid> registeredFuels(Level world);
}
